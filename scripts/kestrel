#!/usr/bin/env python

"""
    Kestrel: An XMPP-based Job Scheduler
    Copyright (C) 2011 Lance Stout
    This file is part of Kestrel.

    See the file LICENSE for copying permission.
"""

import os
import sys
import logging
import optparse

from kestrel import __version__, load_config, Worker, Manager

def start_worker(conf):
    return Worker(conf['worker']['xmpp']['jid'],
                  conf['worker']['xmpp']['password'],
                  conf['worker'])

def start_manager(conf):
    return Manager(conf['manager']['xmpp']['jid'],
                   conf['manager']['xmpp']['password'],
                   conf['manager']['xmpp']['server'],
                   conf['manager']['xmpp']['port'],
                   conf['manager'])

if __name__ == '__main__':
    opts = optparse.OptionParser(
        usage="Usage: %prog [options] worker|manager",
        version='%%prog %s' % __version__)

    opts.add_option('-q','--quiet',
                    help='set logging to ERROR',
                    action='store_const',
                    dest='loglevel',
                    const=logging.ERROR,
                    default=logging.INFO)
    opts.add_option('-d','--debug',
                    help='set logging to DEBUG',
                    action='store_const',
                    dest='loglevel',
                    const=logging.DEBUG,
                    default=logging.INFO)
    opts.add_option('-v','--verbose',
                    help='set logging to COMM',
                    action='store_const',
                    dest='loglevel',
                    const=5,
                    default=logging.INFO)
    opts.add_option('-c', '--config',
                    help=('Alternate location for config file.'),
                    dest='configfile',
                    metavar='FILE',
                    default='~/.kestrelrc')

    (options, args) = opts.parse_args()

    if len(args) < 1:
        opts.print_help()
        sys.exit(1)

    conf = load_config(options.configfile)
    logging.basicConfig(level=options.loglevel, format='%(asctime)s %(levelname)-8s %(message)s')

    handlers = {'worker': start_worker,
                'manager': start_manager}
    handler = handlers.get(args[0], start_worker)

    xmpp = handler(conf)



    if xmpp.connect():
        xmpp.process(threaded=False)
        logging.log(logging.INFO, "System disconnecting.")
        xmpp.disconnect()
        logging.log(logging.INFO, "System exiting.")
        sys.exit(0)
    else:
        logging.log(logging.CRITICAL, "Unable to connect.")

